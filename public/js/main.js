!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/static/js",n(n.s=1)}([function(t,e,n){
/* Riot v3.13.2, @license MIT */
!function(t){"use strict";function e(t,e){return(e||document).querySelector(t)}var n,r,i=[],o={},a="yield",s="__global_mixin",u="riot-",l=["ref","data-ref"],c="data-is",f="if",p="each",d="no-reorder",h="show",g="hide",m="key",v="__riot-events__",y="string",_="object",b="undefined",x="function",w="http://www.w3.org/1999/xlink",A="http://www.w3.org/2000/svg",N=/^xlink:(\w+)/,O=typeof window===b?void 0:window,C=/^on/,j=/([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g,k={viewbox:"viewBox",preserveaspectratio:"preserveAspectRatio"},T=/^(?:disabled|checked|readonly|required|allowfullscreen|auto(?:focus|play)|compact|controls|default|formnovalidate|hidden|ismap|itemscope|loop|multiple|muted|no(?:resize|shade|validate|wrap)?|open|reversed|seamless|selected|sortable|truespeed|typemustmatch)$/,E=0|(O&&O.document||{}).documentMode;function L(t){return"svg"===t?document.createElementNS(A,t):document.createElement(t)}function M(t,e,n){var r=N.exec(e);r&&r[1]?t.setAttributeNS(w,r[1],n):t.setAttribute(e,n)}var S,P,I={},R=!1;O&&(S=L("style"),P=e("style[type=riot]"),M(S,"type","text/css"),P?(P.id&&(S.id=P.id),P.parentNode.replaceChild(S,P)):document.head.appendChild(S),r=(n=S).styleSheet);var H={styleNode:n,add:function(t,e){I[e]=t,R=!0},inject:function(){if(O&&R){R=!1;var t=Object.keys(I).map(function(t){return I[t]}).join("\n");r?r.cssText=t:n.innerHTML=t}},remove:function(t){delete I[t],R=!0}},V=function(){var t="[{(,;:?=|&!^~>%*/",e=["case","default","do","else","in","instanceof","prefix","return","typeof","void","yield"],n=e.reduce(function(t,e){return t+e.slice(-1)},""),r=/^\/(?=[^*>\/])[^[\/\\]*(?:(?:\\.|\[(?:\\.|[^\]\\]*)*\])[^[\\\/]*)*?\/[gimuy]*/,i=/[$\w]/;function o(t,e){for(;--e>=0&&/\s/.test(t[e]););return e}return function(a,s){var u=/.*/g,l=u.lastIndex=s++,c=u.exec(a)[0].match(r);if(c){var f=l+c[0].length;l=o(a,l);var p=a[l];if(l<0||~t.indexOf(p))return f;if("."===p)"."===a[l-1]&&(s=f);else if("+"===p||"-"===p)(a[--l]!==p||(l=o(a,l))<0||!i.test(a[l]))&&(s=f);else if(~n.indexOf(p)){for(var d=l+1;--l>=0&&i.test(a[l]););~e.indexOf(a.slice(l+1,d))&&(s=f)}}return s}}(),$=function(t){var e,n,r="g",i=/"[^"\\]*(?:\\[\S\s][^"\\]*)*"|'[^'\\]*(?:\\[\S\s][^'\\]*)*'|`[^`\\]*(?:\\[\S\s][^`\\]*)*`/g,o=i.source+"|"+/(?:\breturn\s+|(?:[$\w\)\]]|\+\+|--)\s*(\/)(?![*\/]))/.source+"|"+/\/(?=[^*\/])[^[\/\\]*(?:(?:\[(?:\\.|[^\]\\]*)*\]|\\.)[^[\/\\]*)*?([^<]\/)[gim]*/.source,a=RegExp("[\\x00-\\x1F<>a-zA-Z0-9'\",;\\\\]"),s=/(?=[[\]()*+?.^$|])/g,u=i.source+"|"+/(\/)(?![*\/])/.source,l={"(":RegExp("([()])|"+u,r),"[":RegExp("([[\\]])|"+u,r),"{":RegExp("([{}])|"+u,r)},c="{ }",f=["{","}","{","}",/{[^}]*}/,/\\([{}])/g,/\\({)|{/g,RegExp("\\\\(})|([[({])|(})|"+u,r),c,/^\s*{\^?\s*([$\w]+)(?:\s*,\s*(\S+))?\s+in\s+(\S.*)\s*}/,/(^|[^\\]){=[\S\s]*?}/],p=void 0,d=[];function h(t){return t}function g(t,e){return e||(e=d),new RegExp(t.source.replace(/{/g,e[2]).replace(/}/g,e[3]),t.global?r:"")}function m(t){if(t===c)return f;var e=t.split(" ");if(2!==e.length||a.test(t))throw new Error('Unsupported brackets "'+t+'"');return(e=e.concat(t.replace(s,"\\").split(" ")))[4]=g(e[1].length>1?/{[\S\s]*?}/:f[4],e),e[5]=g(t.length>3?/\\({|})/g:f[5],e),e[6]=g(f[6],e),e[7]=RegExp("\\\\("+e[3]+")|([[({])|("+e[3]+")|"+u,r),e[8]=t,e}function v(t){return t instanceof RegExp?e(t):d[t]}function y(t){(t||(t=c))!==d[8]&&(d=m(t),e=t===c?h:g,d[9]=e(f[9])),p=t}return v.split=function(t,e,n){n||(n=d);var r,i,o,a,s,u,c=[],f=n[6],p=[],h="";for(i=o=f.lastIndex=0;r=f.exec(t);){if(u=f.lastIndex,a=r.index,i){if(r[2]){var g=r[2],m=l[g],v=1;for(m.lastIndex=u;r=m.exec(t);)if(r[1]){if(r[1]===g)++v;else if(!--v)break}else m.lastIndex=_(r.index,m.lastIndex,r[2]);f.lastIndex=v?t.length:m.lastIndex;continue}if(!r[3]){f.lastIndex=_(a,u,r[4]);continue}}r[1]||(y(t.slice(o,a)),o=f.lastIndex,(f=n[6+(i^=1)]).lastIndex=o)}return t&&o<t.length&&y(t.slice(o)),c.qblocks=p,c;function y(t){h&&(t=h+t,h=""),e||i?c.push(t&&t.replace(n[5],"$1")):c.push(t)}function _(n,r,i){return i&&(r=V(t,n)),e&&r>n+2&&(s="⁗"+p.length+"~",p.push(t.slice(n,r)),h+=t.slice(o,n)+s,o=r),r}},v.hasExpr=function(t){return d[4].test(t)},v.loopKeys=function(t){var e=t.match(d[9]);return e?{key:e[1],pos:e[2],val:d[0]+e[3].trim()+d[1]}:{val:t.trim()}},v.array=function(t){return t?m(t):d},Object.defineProperty(v,"settings",{set:function(t){var e;e=(t=t||{}).brackets,Object.defineProperty(t,"brackets",{set:y,get:function(){return p},enumerable:!0}),n=t,y(e)},get:function(){return n}}),v.settings="undefined"!=typeof riot&&riot.settings||{},v.set=y,v.skipRegex=V,v.R_STRINGS=i,v.R_MLCOMMS=/\/\*[^*]*\*+(?:[^*\/][^*]*\*+)*\//g,v.S_QBLOCKS=o,v.S_QBLOCK2=u,v}(),U=function(){var t={};function e(i,o){return i?(t[i]||(t[i]=function(t){var e=function(t){var e,i=$.split(t.replace(n,'"'),1),o=i.qblocks;if(i.length>2||i[0]){var s,u,l=[];for(s=u=0;s<i.length;++s)(e=i[s])&&(e=1&s?a(e,1,o):'"'+e.replace(/\\/g,"\\\\").replace(/\r\n?|\n/g,"\\n").replace(/"/g,'\\"')+'"')&&(l[u++]=e);e=u<2?l[0]:"["+l.join(",")+'].join("")'}else e=a(i[1],0,o);return o.length&&(e=e.replace(r,function(t,e){return o[e].replace(/\r/g,"\\r").replace(/\n/g,"\\n")})),e}(t);return"try{return "!==e.slice(0,11)&&(e="return "+e),new Function("E",e+";")}(i))).call(o,function(t,n){t.riotData={tagName:n&&n.__&&n.__.tagName,_riot_id:n&&n._riot_id},e.errorHandler?e.errorHandler(t):"undefined"!=typeof console&&"function"==typeof console.error&&(console.error(t.message),console.log("<%s> %s",t.riotData.tagName||"Unknown tag",this.tmpl),console.log(this.data))}.bind({data:o,tmpl:i})):i}e.hasExpr=$.hasExpr,e.loopKeys=$.loopKeys,e.clearCache=function(){t={}},e.errorHandler=null;var n=/\u2057/g,r=/\u2057(\d+)~/g,i=/^(?:(-?[_A-Za-z\xA0-\xFF][-\w\xA0-\xFF]*)|\u2057(\d+)~):/,o={"(":/[()]/g,"[":/[[\]]/g,"{":/[{}]/g};function a(t,e,n){if(t=t.replace(/\s+/g," ").trim().replace(/\ ?([[\({},?\.:])\ ?/g,"$1")){for(var r,a=[],s=0;t&&(r=t.match(i))&&!r.index;){var u,l,f=/,|([[{(])|$/g;for(t=RegExp.rightContext,u=r[2]?n[r[2]].slice(1,-1).trim().replace(/\s+/g," "):r[1];l=(r=f.exec(t))[1];)p(l,f);l=t.slice(0,r.index),t=RegExp.rightContext,a[s++]=c(l,1,u)}t=s?s>1?"["+a.join(",")+'].join(" ").trim()':a[0]:c(t,e)}return t;function p(e,n){var r,i=1,a=o[e];for(a.lastIndex=n.lastIndex;r=a.exec(t);)if(r[0]===e)++i;else if(!--i)break;n.lastIndex=i?t.length:a.lastIndex}}var s='"in this?this:'+("object"!=typeof window?"global":"window")+").",u=/[,{][\$\w]+(?=:)|(^ *|[^$\w\.{])(?!(?:typeof|true|false|null|undefined|in|instanceof|is(?:Finite|NaN)|void|NaN|new|Date|RegExp|Math)(?![$\w]))([$_A-Za-z][$\w]*)/g,l=/^(?=(\.[$\w]+))\1(?:[^.[(]|$)/;function c(t,e,n){var r;return t=t.replace(u,function(t,e,n,i,o){return n&&(i=r?0:i+t.length,"this"!==n&&"global"!==n&&"window"!==n?(t=e+'("'+n+s+n,i&&(r="."===(o=o[i])||"("===o||"["===o)):i&&(r=!l.test(o.slice(i)))),t}),r&&(t="try{return "+t+"}catch(e){E(e,this)}"),n?t=(r?"function(){"+t+"}.call(this)":"("+t+")")+'?"'+n+'":""':e&&(t="function(v){"+(r?t.replace("return ","v="):"v=("+t+")")+';return v||v===0?v:""}.call(this)'),t}return e.version=$.version="v3.0.8",e}(),B=function(t){t=t||{};var e={},n=Array.prototype.slice;return Object.defineProperties(t,{on:{value:function(n,r){return"function"==typeof r&&(e[n]=e[n]||[]).push(r),t},enumerable:!1,writable:!1,configurable:!1},off:{value:function(n,r){if("*"!=n||r)if(r)for(var i,o=e[n],a=0;i=o&&o[a];++a)i==r&&o.splice(a--,1);else delete e[n];else e={};return t},enumerable:!1,writable:!1,configurable:!1},one:{value:function(e,n){return t.on(e,function r(){t.off(e,r),n.apply(t,arguments)})},enumerable:!1,writable:!1,configurable:!1},trigger:{value:function(r){var i,o,a,s=arguments,u=arguments.length-1,l=new Array(u);for(a=0;a<u;a++)l[a]=s[a+1];for(i=n.call(e[r]||[],0),a=0;o=i[a];++a)o.apply(t,l);return e["*"]&&"*"!=r&&t.trigger.apply(t,["*",r].concat(l)),t},enumerable:!1,writable:!1,configurable:!1}}),t};function z(t,e){return Object.getOwnPropertyDescriptor(t,e)}function D(t){return typeof t===b}function F(t,e){var n=z(t,e);return D(t[e])||n&&n.writable}function q(t){for(var e,n=1,r=arguments,i=r.length;n<i;n++)if(e=r[n])for(var o in e)F(t,o)&&(t[o]=e[o]);return t}function K(t){return Object.create(t)}var W=q(K($.settings),{skipAnonymousTags:!0,keepValueAttributes:!1,autoUpdate:!0});function Z(t,e){return[].slice.call((e||document).querySelectorAll(t))}function G(){return document.createTextNode("")}function Q(t,e){t.style.display=e?"":"none",t.hidden=!e}function J(t,e){return t.getAttribute(e)}function X(t,e){t.removeAttribute(e)}function Y(t,e,n){if(n){var r=t.ownerDocument.importNode((new DOMParser).parseFromString('<svg xmlns="'+A+'">'+e+"</svg>","application/xml").documentElement,!0);t.appendChild(r)}else t.innerHTML=e}function tt(t,e){if(t)for(var n;n=j.exec(t);)e(n[1].toLowerCase(),n[2]||n[3]||n[4])}function et(){return document.createDocumentFragment()}function nt(t,e,n){t.insertBefore(e,n.parentNode&&n)}function rt(t){return Object.keys(t).reduce(function(e,n){return e+" "+n+": "+t[n]+";"},"")}function it(t,e,n){if(t){var r,i=e(t,n);if(!1===i)return;for(t=t.firstChild;t;)r=t.nextSibling,it(t,e,i),t=r}}var ot=Object.freeze({$$:Z,$:e,createDOMPlaceholder:G,mkEl:L,setAttr:M,toggleVisibility:Q,getAttr:J,remAttr:X,setInnerHTML:Y,walkAttrs:tt,createFrag:et,safeInsert:nt,styleObjectToString:rt,walkNodes:it});function at(t){return D(t)||null===t}function st(t){return at(t)||""===t}function ut(t){return typeof t===x}function lt(t){return t&&typeof t===_}function ct(t){var e=t.ownerSVGElement;return!!e||null===e}function ft(t){return Array.isArray(t)||t instanceof Array}function pt(t){return T.test(t)}function dt(t){return typeof t===y}var ht=Object.freeze({isBlank:st,isFunction:ut,isObject:lt,isSvg:ct,isWritable:F,isArray:ft,isBoolAttr:pt,isNil:at,isString:dt,isUndefined:D});function gt(t,e){return-1!==t.indexOf(e)}function mt(t,e){for(var n=t?t.length:0,r=0;r<n;r++)e(t[r],r);return t}function vt(t,e){return t.slice(0,e.length)===e}var yt,_t=(yt=-1,function(){return++yt});function bt(t,e,n,r){return Object.defineProperty(t,e,q({value:n,enumerable:!1,writable:!1,configurable:!0},r)),t}function xt(t){return t.replace(/-(\w)/g,function(t,e){return e.toUpperCase()})}function wt(t){console&&console.warn&&console.warn(t)}var At=Object.freeze({contains:gt,each:mt,getPropDescriptor:z,startsWith:vt,uid:_t,defineProperty:bt,objectCreate:K,extend:q,toCamel:xt,warn:wt});function Nt(t,e,n,r,i){var o=t[e],a=ft(o),s=!D(i);if(!o||o!==n)if(!o&&r)t[e]=[n];else if(o)if(a){var u=o.indexOf(n);if(u===i)return;-1!==u&&o.splice(u,1),s?o.splice(i,0,n):o.push(n)}else t[e]=[o,n];else t[e]=n}function Ot(t){return t.tagName&&o[J(t,c)||J(t,c)||t.tagName.toLowerCase()]}function Ct(t,e){var n=Ot(t),r=!e&&J(t,c);return r&&!U.hasExpr(r)?r:n?n.name:t.tagName.toLowerCase()}function jt(){return this.parent?q(K(this),this.parent):this}var kt=/<yield\b/i,Tt=/<yield\s*(?:\/>|>([\S\s]*?)<\/yield\s*>|>)/gi,Et=/<yield\s+to=['"]([^'">]*)['"]\s*>([\S\s]*?)<\/yield\s*>/gi,Lt=/<yield\s+from=['"]?([-\w]+)['"]?\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/gi,Mt={tr:"tbody",th:"tr",td:"tr",col:"colgroup"},St=E&&E<10?/^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?|opt(?:ion|group))$/:/^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?)$/,Pt="div",It="svg";function Rt(t,n,r){var i=t&&t.match(/^\s*<([-\w]+)/),o=i&&i[1].toLowerCase(),a=L(r?It:Pt);return t=function(t,e){if(!kt.test(t))return t;var n={};return e=e&&e.replace(Et,function(t,e,r){return n[e]=n[e]||r,""}).trim(),t.replace(Lt,function(t,e,r){return n[e]||r||""}).replace(Tt,function(t,n){return e||n||""})}(t,n),St.test(o)?a=function(t,n,r){var i="o"===r[0],o=i?"select>":"table>";if(t.innerHTML="<"+o+n.trim()+"</"+o,o=t.firstChild,i)o.selectedIndex=-1;else{var a=Mt[r];a&&1===o.childElementCount&&(o=e(a,o))}return o}(a,t,o):Y(a,t,r),a}var Ht=/^on/;function Vt(t){for(var e=t;e.__.isAnonymous&&e.parent;)e=e.parent;return e}function $t(t,e,n,r){var i,o=function(t,e,n){var r=this.__.parent,i=this.__.item;if(!i)for(;r&&!i;)i=r.__.item,r=r.__.parent;if(F(n,"currentTarget")&&(n.currentTarget=t),F(n,"target")&&(n.target=n.srcElement),F(n,"which")&&(n.which=n.charCode||n.keyCode),n.item=i,e.call(this,n),W.autoUpdate&&!n.preventUpdate){var o=Vt(this);o.isMounted&&o.update()}}.bind(r,n,e);n[t]=null,i=t.replace(C,""),gt(r.__.listeners,n)||r.__.listeners.push(n),n[v]||(n[v]={}),n[v][t]&&n.removeEventListener(i,n[v][t]),n[v][t]=o,n.addEventListener(i,o,!1)}function Ut(t,e,n,r){var i=ye(t,e,n),o=e.tagName||Ct(e.root,!0),a=Vt(r);return bt(i,"parent",a),i.__.parent=r,Nt(a.tags,o,i),a!==r&&Nt(r.tags,o,i),i}function Bt(t,e,n,r){if(ft(t[e])){var i=t[e].indexOf(n);-1!==i&&t[e].splice(i,1),t[e].length?1!==t[e].length||r||(t[e]=t[e][0]):delete t[e]}else t[e]===n&&delete t[e]}function zt(t,e){var n,r,i=G(),o=G(),a=et();for(this.root.insertBefore(i,this.root.firstChild),this.root.appendChild(o),this.__.head=r=i,this.__.tail=o;r;)n=r.nextSibling,a.appendChild(r),this.__.virts.push(r),r=n;e?t.insertBefore(a,e.__.head):t.appendChild(a)}function Dt(t,e){if(e.parentNode){var n=et();zt.call(t,n),e.parentNode.replaceChild(n,e)}}function Ft(t){if(!this.root||!J(this.root,"virtualized")){var e,n=t.dom,r=function(t){return t?(t=t.replace(u,""),k[t]&&(t=k[t]),t):null}(t.attr),i=gt([h,g],r),a=t.root&&"VIRTUAL"===t.root.tagName,s=this.__,l=s.isAnonymous,c=n&&(t.parent||n.parentNode),f=W.keepValueAttributes,p="style"===r,d="class"===r,m="value"===r;if(t._riot_id)t.__.wasCreated?t.update():(t.mount(),a&&Dt(t,t.root));else{if(t.update)return t.update();var v=i&&!l?jt.call(this):this,y=!st(e=U(t.expr,v)),_=lt(e);if(_&&(d?e=U(JSON.stringify(e),this):p&&(e=rt(e))),!t.attr||t.wasParsedOnce&&!1!==e&&(y||m&&(!m||f))||X(n,J(n,t.attr)?t.attr:r),t.bool&&(e=!!e&&r),t.isRtag)return function(t,e,n){var r,i=t.tag||t.dom._tag,a=(i?i.__:{}).head,s="VIRTUAL"===t.dom.tagName;i&&t.tagName===n?i.update():(i&&(s&&(r=G(),a.parentNode.insertBefore(r,a)),i.unmount(!0)),dt(n)&&(t.impl=o[n],t.impl&&(t.tag=i=Ut(t.impl,{root:t.dom,parent:e,tagName:n},t.dom.innerHTML,e),mt(t.attrs,function(t){return M(i.root,t.name,t.value)}),t.tagName=n,i.mount(),s&&Dt(i,r||i.root),e.__.onUnmount=function(){var t=i.opts.dataIs;Bt(i.parent.tags,t,i),Bt(i.__.parent.tags,t,i),i.unmount()})))}(t,this,e);if((!t.wasParsedOnce||t.value!==e)&&(t.value=e,t.wasParsedOnce=!0,!_||d||p||i)){if(y||(e=""),!r)return e+="",void(c&&(t.parent=c,"TEXTAREA"===c.tagName?(c.value=e,E||(n.nodeValue=e)):n.nodeValue=e));switch(!0){case ut(e):b=r,Ht.test(b)&&$t(r,e,n,this);break;case i:Q(n,r===g?!e:e);break;default:t.bool&&(n[r]=e),m&&n.value!==e?n.value=e:y&&!1!==e&&M(n,r,e),p&&n.hidden&&Q(n,!1)}var b}}}}function qt(t){mt(t,Ft.bind(this))}function Kt(t,e,n,r,i){if(!t||!n){var o=t?jt.call(this):e||this;mt(i,function(t){t.expr&&Ft.call(o,t.expr),r[xt(t.name).replace(u,"")]=t.expr?t.expr.value:t.value})}}function Wt(t){if(!t){var e=Object.keys(o);return e+Wt(e)}return t.filter(function(t){return!/[^-\w]/.test(t)}).reduce(function(t,e){var n=e.trim().toLowerCase();return t+",["+c+'="'+n+'"]'},"")}function Zt(t,e){var n=this.name,r=this.tmpl,i=this.css,a=this.attrs,s=this.onCreate;return o[n]||(Gt(n,r,i,a,s),o[n].class=this.constructor),_e(t,n,e,this),i&&H.inject(),this}function Gt(t,e,n,r,i){return ut(r)&&(i=r,/^[\w-]+\s?=/.test(n)?(r=n,n=""):r=""),n&&(ut(n)?i=n:H.add(n,t)),t=t.toLowerCase(),o[t]={name:t,tmpl:e,attrs:r,fn:i},t}function Qt(t,e,n,r,i){return n&&H.add(n,t),o[t]={name:t,tmpl:e,attrs:r,fn:i},t}function Jt(t,e,n){var r,i,o=[];if(H.inject(),(lt(e)||ut(e))&&(n=e,e=0),dt(t)?(t="*"===t?i=Wt():t+Wt(t.split(/, */)),r=t?Z(t):[]):r=t,"*"===e){if(e=i||Wt(),r.tagName)r=Z(e,r);else{var a=[];mt(r,function(t){return a.push(Z(e,t))}),r=a}e=0}return function t(r){if(r.tagName){var i,a=J(r,c);e&&a!==e&&(a=e,M(r,c,e)),(i=_e(r,a||r.tagName.toLowerCase(),ut(n)?n():n))&&o.push(i)}else r.length&&mt(r,t)}(r),o}var Xt={},Yt=Xt[s]={},te=0;function ee(t,e,n){if(lt(t))ee("__"+te+++"__",t,!0);else{var r=n?Yt:Xt;if(!e){if(D(r[t]))throw new Error("Unregistered mixin: "+t);return r[t]}r[t]=ut(e)?q(e.prototype,r[t]||{})&&e:q(r[t]||{},e)}}function ne(){return mt(i,function(t){return t.update()})}function re(t){return H.remove(t),delete o[t]}var ie=Object.freeze({Tag:Zt,tag:Gt,tag2:Qt,mount:Jt,mixin:ee,update:ne,unregister:re,version:"v3.13.2"});function oe(t,e){var n,r=this.parent;r&&(ft(n=r.tags[t])?n.splice(e,0,n.splice(n.indexOf(this),1)[0]):Nt(r.tags,t,this))}function ae(t,e){for(var n,r=this.__.head,i=et();r;)if(n=r.nextSibling,i.appendChild(r),(r=n)===this.__.tail){i.appendChild(r),t.insertBefore(i,e.__.head);break}}function se(t,e,n){var r={};return r[t.key]=e,t.pos&&(r[t.pos]=n),r}function ue(t,e){t.splice(e,1),this.unmount(),Bt(this.parent,this,this.__.tagName,!0)}function le(t,e,n){var r=typeof J(t,d)!==y||X(t,d),i=J(t,m),a=!!i&&U.hasExpr(i),s=Ct(t),u=o[s],l=t.parentNode,c=G(),h=Ot(t),g=J(t,f),v=[],b=t.innerHTML,x=!o[s],w="VIRTUAL"===t.tagName,A=[];return X(t,p),X(t,m),(n=U.loopKeys(n)).isLoop=!0,g&&X(t,f),l.insertBefore(c,t),l.removeChild(t),n.update=function(){n.value=U(n.val,e);var o=n.value,l=et(),f=!ft(o)&&!dt(o),p=c.parentNode,d=[],m=f&&!!o;if(p){f&&(o=o?Object.keys(o).map(function(t){return se(n,o[t],t)}):[]);var y=0;mt(o,function(c,N){var O=N-y,C=!m&&n.key?se(n,c,N):c;if(!g||U(g,q(K(e),C))){var j=function(t,e,n,r){return t?r?U(t,n):e[t]:e}(i,c,C,a),k=!f&&r&&typeof c===_||i,T=A.indexOf(j),E=-1===T,L=!E&&k?T:O,M=v[L],S=O>=A.length,P=k&&E||!k&&!M||!v[O];P?((M=ye(u,{parent:e,isLoop:!0,isAnonymous:x,tagName:s,root:t.cloneNode(x),item:C,index:O},b)).mount(),S?function(t,e){e?zt.call(this,t):t.appendChild(this.root)}.apply(M,[l||p,w]):function(t,e,n){n?zt.apply(this,[t,e]):nt(t,this.root,e.root)}.apply(M,[p,v[O],w]),S||A.splice(O,0,C),v.splice(O,0,M),h&&Nt(e.tags,s,M,!0)):L!==O&&k&&((i||gt(o,A[L]))&&(function(t,e,n){n?ae.apply(this,[t,e]):nt(t,this.root,e.root)}.apply(M,[p,v[O],w]),v.splice(O,0,v.splice(L,1)[0]),A.splice(O,0,A.splice(L,1)[0])),n.pos&&(M[n.pos]=O),!h&&M.tags&&function(t){var e=this;mt(Object.keys(this.tags),function(n){oe.apply(e.tags[n],[n,t])})}.call(M,O)),q(M.__,{item:C,index:O,parent:e}),d[O]=j,P||M.update(C)}else y++}),function(t,e,n){for(var r=e.length,i=t.length-n;r>i;)r--,ue.apply(e[r],[e,r])}(o,v,y),A=d.slice(),p.insertBefore(l,c)}},n.unmount=function(){mt(v,function(t){t.unmount()})},n}var ce={init:function(t,e,n,r){return this.dom=t,this.attr=n,this.rawValue=r,this.parent=e,this.hasExp=U.hasExpr(r),this},update:function(){var t=this.value,e=this.parent&&Vt(this.parent),n=this.dom.__ref||this.tag||this.dom;this.value=this.hasExp?U(this.rawValue,this.parent):this.rawValue,!st(t)&&e&&Bt(e.refs,t,n),!st(this.value)&&dt(this.value)?(e&&Nt(e.refs,this.value,n,null,this.parent.__.index),this.value!==t&&M(this.dom,this.attr,this.value)):X(this.dom,this.attr),this.dom.__ref||(this.dom.__ref=n)},unmount:function(){var t=this.tag||this.dom,e=this.parent&&Vt(this.parent);!st(this.value)&&e&&Bt(e.refs,this.value,t)}};function fe(t,e,n,r){return K(ce).init(t,e,n,r)}function pe(t){mt(t,function(t){t.unmount?t.unmount(!0):t.tagName?t.tag.unmount(!0):t.unmount&&t.unmount()})}var de={init:function(t,e,n){X(t,f),q(this,{tag:e,expr:n,stub:G(),pristine:t});var r=t.parentNode;return r.insertBefore(this.stub,t),r.removeChild(t),this},update:function(){this.value=U(this.expr,this.tag),this.stub.parentNode&&(this.value&&!this.current?(this.current=this.pristine.cloneNode(!0),this.stub.parentNode.insertBefore(this.current,this.stub),this.expressions=ge.apply(this.tag,[this.current,!0])):!this.value&&this.current&&(this.unmount(),this.current=null,this.expressions=[]),this.value&&qt.call(this.tag,this.expressions))},unmount:function(){this.current&&(this.current._tag?this.current._tag.unmount():this.current.parentNode&&this.current.parentNode.removeChild(this.current)),pe(this.expressions||[])}};function he(t,e,n){return K(de).init(t,e,n)}function ge(t,e){var n=this,r=[];return it(t,function(i){var o,a,s=i.nodeType;if((e||i!==t)&&(3===s&&"STYLE"!==i.parentNode.tagName&&U.hasExpr(i.nodeValue)&&r.push({dom:i,expr:i.nodeValue}),1===s)){var u="VIRTUAL"===i.tagName;if(o=J(i,p))return u&&M(i,"loopVirtual",!0),r.push(le(i,n,o)),!1;if(o=J(i,f))return r.push(he(i,n,o)),!1;if((o=J(i,c))&&U.hasExpr(o))return r.push({isRtag:!0,expr:o,dom:i,attrs:[].slice.call(i.attributes)}),!1;if(a=Ot(i),u&&(J(i,"virtualized")&&i.parentElement.removeChild(i),a||J(i,"virtualized")||J(i,"loopVirtual")||(a={tmpl:i.outerHTML})),a&&(i!==t||e)){var l=J(i,c);if(!u||l)return l&&u&&wt("Virtual tags shouldn't be used together with the \""+c+'" attribute - https://github.com/riot/riot/issues/2511'),r.push(Ut(a,{root:i,parent:n},i.innerHTML,n)),!1;M(i,"virtualized",!0);var d=ye({tmpl:i.outerHTML},{root:i,parent:n},i.innerHTML);r.push(d)}me.apply(n,[i,i.attributes,function(t,e){e&&r.push(e)}])}}),r}function me(t,e,n){var r=this;mt(e,function(e){if(!e)return!1;var i,o=e.name,s=pt(o);gt(l,o)&&t.tagName.toLowerCase()!==a?i=fe(t,r,o,e.value):U.hasExpr(e.value)&&(i={dom:t,expr:e.value,attr:o,bool:s}),n(e,i)})}function ve(t){var e=this.__,n=e.isAnonymous,r=e.skipAnonymous;bt(this,"isMounted",t),n&&r||(t?this.trigger("mount"):(this.trigger("unmount"),this.off("*"),this.__.wasCreated=!1))}function ye(t,e,n){void 0===t&&(t={}),void 0===e&&(e={});var r,o=e.context||{},a=e.opts||{},l=e.parent,c=e.isLoop,f=!!e.isAnonymous,p=W.skipAnonymousTags&&f,d=e.item,h=e.index,g=t.tmpl,m=[],y=e.root,_=e.tagName||Ct(y),b="virtual"===_,x=!b&&!g;return x||c&&f?r=y:(b||(y.innerHTML=""),r=Rt(g,n,ct(y))),p||B(o),t.name&&y._tag&&y._tag.unmount(!0),bt(o,"__",{impl:t,root:y,skipAnonymous:p,implAttrs:[],isAnonymous:f,instAttrs:[],innerHTML:n,tagName:_,index:h,isLoop:c,isInline:x,item:d,parent:l,listeners:[],virts:[],wasCreated:!1,tail:null,head:null}),[["isMounted",!1],["_riot_id",_t()],["root",y],["opts",a,{writable:!0,enumerable:!0}],["parent",l||null],["tags",{}],["refs",{}],["update",function(t){return function(t,e,n){var r=t.__,i={},o=t.isMounted&&!r.skipAnonymous;return r.isAnonymous&&r.parent&&q(t,r.parent),q(t,e),Kt.apply(t,[r.isLoop,r.parent,r.isAnonymous,i,r.instAttrs]),o&&t.isMounted&&ut(t.shouldUpdate)&&!t.shouldUpdate(e,i)?t:(q(t.opts,i),o&&t.trigger("update",e),qt.call(t,n),o&&t.trigger("updated"),t)}(o,t,m)}],["mixin",function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return function(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];return mt(e,function(e){var n,r,i=[],o=["init","__proto__"];e=dt(e)?ee(e):e,n=ut(e)?new e:e;var a=Object.getPrototypeOf(n);do{i=i.concat(Object.getOwnPropertyNames(r||n))}while(r=Object.getPrototypeOf(r||n));mt(i,function(e){if(!gt(o,e)){var r=z(n,e)||z(a,e),i=r&&(r.get||r.set);!t.hasOwnProperty(e)&&i?Object.defineProperty(t,e,r):t[e]=ut(n[e])?n[e].bind(t):n[e]}}),n.init&&n.init.bind(t)(t.opts)}),t}.apply(void 0,[o].concat(t))}],["mount",function(){return function(t,e,n,r){var i=t.__,o=i.root;o._tag=t,me.apply(i.parent,[o,o.attributes,function(e,n){!i.isAnonymous&&ce.isPrototypeOf(n)&&(n.tag=t),e.expr=n,i.instAttrs.push(e)}]),tt(i.impl.attrs,function(t,e){i.implAttrs.push({name:t,value:e})}),me.apply(t,[o,i.implAttrs,function(t,e){e?n.push(e):M(o,t.name,t.value)}]),Kt.apply(t,[i.isLoop,i.parent,i.isAnonymous,r,i.instAttrs]);var a=ee(s);if(a&&!i.skipAnonymous)for(var u in a)a.hasOwnProperty(u)&&t.mixin(a[u]);if(i.impl.fn&&i.impl.fn.call(t,r),i.skipAnonymous||t.trigger("before-mount"),mt(ge.apply(t,[e,i.isAnonymous]),function(t){return n.push(t)}),t.update(i.item),!i.isAnonymous&&!i.isInline)for(;e.firstChild;)o.appendChild(e.firstChild);if(bt(t,"root",o),!i.skipAnonymous&&t.parent){var l=Vt(t.parent);l.one(l.isMounted?"updated":"mount",function(){ve.call(t,!0)})}else ve.call(t,!0);return t.__.wasCreated=!0,t}(o,r,m,a)}],["unmount",function(t){return function(t,e,n){var r=t.__,o=r.root,a=i.indexOf(t),s=o.parentNode;if(r.skipAnonymous||t.trigger("before-unmount"),tt(r.impl.attrs,function(t){vt(t,u)&&(t=t.slice(u.length)),X(o,t)}),t.__.listeners.forEach(function(t){Object.keys(t[v]).forEach(function(e){t.removeEventListener(e,t[v][e])})}),-1!==a&&i.splice(a,1),r.parent&&!r.isAnonymous){var l=Vt(r.parent);r.isVirtual?Object.keys(t.tags).forEach(function(e){return Bt(l.tags,e,t.tags[e])}):Bt(l.tags,r.tagName,t)}return t.__.virts&&mt(t.__.virts,function(t){t.parentNode&&t.parentNode.removeChild(t)}),pe(n),mt(r.instAttrs,function(t){return t.expr&&t.expr.unmount&&t.expr.unmount()}),e?Y(o,""):s&&s.removeChild(o),r.onUnmount&&r.onUnmount(),t.isMounted||ve.call(t,!0),ve.call(t,!1),delete o._tag,t}(o,t,m)}]].reduce(function(t,e){var n=e[0],r=e[1],i=e[2];return bt(o,n,r,i),t},q(o,d))}function _e(t,e,n,r){var a,s=o[e],u=o[e].class,l=r||(u?K(u.prototype):{}),c=t._innerHTML=t._innerHTML||t.innerHTML,f=q({root:t,opts:n,context:l},{parent:n?n.parent:null});return s&&t&&(a=ye(s,f,c)),a&&a.mount&&(a.mount(!0),gt(i,a)||i.push(a)),a}var be=Object.freeze({arrayishAdd:Nt,getTagName:Ct,inheritParentProps:jt,mountTo:_e,selectTags:Wt,arrayishRemove:Bt,getTag:Ot,initChildTag:Ut,moveChildTag:oe,makeReplaceVirtual:Dt,getImmediateCustomParentTag:Vt,makeVirtual:zt,moveVirtual:ae,unmountAll:pe,createIfDirective:he,createRefDirective:fe}),xe=W,we={tmpl:U,brackets:$,styleManager:H,vdom:i,styleNode:H.styleNode,dom:ot,check:ht,misc:At,tags:be},Ae=Zt,Ne=Gt,Oe=Qt,Ce=Jt,je=ee,ke=ne,Te=re,Ee=B,Le=q({},ie,{observable:B,settings:xe,util:we});t.settings=xe,t.util=we,t.Tag=Ae,t.tag=Ne,t.tag2=Oe,t.mount=Ce,t.mixin=je,t.update=ke,t.unregister=Te,t.version="v3.13.2",t.observable=Ee,t.default=Le,Object.defineProperty(t,"__esModule",{value:!0})}(e)},function(t,e,n){"use strict";n.r(e);var r=n(0),i=n.n(r);n(2),n(3);i.a.mount("hello-world")},function(t,e,n){!function(t,e){"use strict";var n="isMounted opts".split(" ");function r(t){e.util.styleManager.inject();for(var i=document.querySelectorAll(t+", [data-is="+t+"]"),o=[],a=0;a<i.length;a++){var s,u=i[a],l=u._tag;r.trigger("before-unmount",l),l.unmount(!0),u.innerHTML=l.__.innerHTML,(l.__.instAttrs||[]).map(function(t){u.setAttribute(t.name,t.value)});var c={};for(p in l.opts)c[p]=l.opts[p];c.parent=l.parent,r.trigger("before-mount",c,l);var f=e.mount(u,c)[0];for(var p in l)s=l[p],~n.indexOf(p)||(f[p]=s);f.update(),o.push(f),r.trigger("after-mount",f,l)}return o}e.observable(r),e.reload=r,e.default&&(e.default.reload=r),t.reload=r,t.default=r,Object.defineProperty(t,"__esModule",{value:!0})}(e,n(0))},function(t,e,n){n(0).tag2("hello-world","<h3>Hello from the Hello World Riot Tag!!</h3>","","",function(t){console.log("Hello from the Hello World Riot Tag")})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,